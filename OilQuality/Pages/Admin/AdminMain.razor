@page "/admin"
@using OilQuality.Data;
@using Radzen.Blazor

<MudAppBar Style="margin-top: 2%; position: absolute; width: 90%; left: 50%; transform: translate(-50%, 0); background-color: white; box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px; ">
    <div Class="d-flex mx-auto">
        <MudButton Href="/admin">
            Главная страница
        </MudButton>
        <MudButton Href="/workerslist">
            Сотрудники
        </MudButton>
    </div>
    <MudIconButton Icon="@Icons.Material.Outlined.ExitToApp" aria-label="exit" Href="/"></MudIconButton>
</MudAppBar>

<div class="mainblock">
    <div style="width: 49%; height: 49%; box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;">
        <img src='/css//Mesh-20.png' style="width: 100%; height:100%; object-fit: cover; overflow: hidden">
    </div>
    <div style="background-color: white; width: 49%; height: 49%; box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px; align-items: center;  justify-content: center;">
        <RadzenChart ColorScheme="ColorScheme.Monochrome" Style="width: 100%; height: 100%; ">
            <RadzenDonutSeries Data="@revenueTwo" CategoryProperty="UserRole" ValueProperty="CountOfUsers">
                <TitleTemplate>
                    <div class="rz-donut-content">
                        <div>Пользователи</div>
                    </div>
                </TitleTemplate>
            </RadzenDonutSeries>
        </RadzenChart>
    </div>
    <div style="background-color: white; width: 49%; height: 49%; box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;">
        <RadzenChart ColorScheme="ColorScheme.Monochrome" Style="width: 100%; height: 100%; ">
            <RadzenDonutSeries Data="@revenue" CategoryProperty="WorkersSurname" ValueProperty="CountOfAnalyze">
                <TitleTemplate>
                    <div class="rz-donut-content">
                        <div>Анализы</div>
                    </div>
                </TitleTemplate>
            </RadzenDonutSeries>
        </RadzenChart>
    </div>
    <div style="width: 49%; height: 49%; box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;">
        <img src='/css//Mesh-20.png' style="width: 100%; height:100%; object-fit: cover; overflow: hidden">
    </div>
</div>

@code {

    private IEnumerable<Analyze> ListOfAnalyzes = new List<Analyze>();
    private int analyzes;
    private IEnumerable<Analyze> ListOfRequests = new List<Analyze>();
    private int requests;
    private IEnumerable<User> ListOfUsers = new List<User>();
    private int users;

    DateTime? date = null;
    string dateFormat = "dd.MM.yyyy";
    List<DataItem> revenue = new List<DataItem>();
    List<DataItemTwo> revenueTwo = new List<DataItemTwo>();

    public List<int> dataList = new List<int>();
    public List<string> labelsList = new List<string>();
    public string[] labels = new string[] { };
    public double[] data = new double[] { };

    public List<int> dataListTwo = new List<int>();
    public List<string> labelsListTwo = new List<string>();
    public string[] labelsTwo = new string[] { };
    public double[] dataTwo = new double[] { };

    protected override void OnInitialized()
    {
        ListOfAnalyzes = DBConnection.ImportOnlyAnalyzes();
        analyzes = ListOfAnalyzes.Count();
        ListOfRequests = DBConnection.ImportOnlyApplications();
        requests = ListOfRequests.Count();
        ListOfUsers = DBConnection.ImportAllLabWorkers();
        users = ListOfUsers.Count();

        UpdateChart();
    }

    class DataItem
    {
        public string WorkersSurname { get; set; }
        public int CountOfAnalyze { get; set; }
    }

    class DataItemTwo
    {
        public string UserRole { get; set; }
        public int CountOfUsers { get; set; }
    }

    private void UpdateChart()
    {
        revenueTwo.Add(new DataItemTwo { UserRole = "Администратор", CountOfUsers = DBConnection.ImportOnlyAdmins().Count });
        revenueTwo.Add(new DataItemTwo { UserRole = "Заведующий", CountOfUsers = DBConnection.ImportOnlyManagers().Count });
        revenueTwo.Add(new DataItemTwo { UserRole = "Лаборант", CountOfUsers = DBConnection.ImportOnlyWorkers().Count });

        foreach (var worker in ListOfUsers)
        {
            List<Analyze> analyzes = DBConnection.ImportOnlyAnalyzesOfWorker(worker);
            revenue.Add(new DataItem { WorkersSurname = worker.Surname, CountOfAnalyze = analyzes.Count });
        }
    }
}


<style>
    .mainblock {
        display: flex;
        box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px;
        position: absolute;
        left: 15%;
        gap: 2%;
        top: 700%;
        width: 70%;
        height: 3100%;
        opacity: 1;
        mix-blend-mode: normal;
        background-color: rgba(255, 255, 255, 1);
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
    }
</style>