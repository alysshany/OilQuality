@page "/worker"
@using OilQuality.Data;
@inject CurrentUser currentUser;


<MudAppBar Style="margin-top: 2%; position: absolute; width: 90%; left: 50%; transform: translate(-50%, 0); background-color: white; box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px;">
    <div Class="d-flex mx-auto">
        <MudButton Href="/worker">
            Главная страница
        </MudButton>
        <MudButton Href="/requestList">
            Заявки
        </MudButton>
        <MudButton Href="/myAnalyzeList">
            Выполненные анализы
        </MudButton>
        <MudButton Href="/workerEquipList">
            Оборудование
        </MudButton>
    </div>
    <MudIconButton Icon="@Icons.Material.Outlined.ExitToApp" aria-label="exit" Href="/"></MudIconButton>
</MudAppBar>

<div class="mainblock">
    <div style="width: 49%; height: 49%; box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;">
        <img src='/css//Mesh-20.png' style="width: 100%; height:100%; object-fit: cover; overflow: hidden">
    </div>
    <div style="background-color: white; width: 49%; height: 49%; box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;">
        <MudChart ChartType="ChartType.Donut" LegendPosition="Position.Right" Width="260px" Height="260px"
                  InputData="@data" InputLabels="@labels">
        </MudChart>
    </div>
    <div style="background-color: white; width: 49%; height: 49%; box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px; overflow: scroll;">
        <MudTable Items="@Elements" @bind-SelectedItem="selectedItem1" Height="auto">
@*            <ToolBarContent>
                <MudText Typo="Typo.h6">Periodic Elements</MudText>
            </ToolBarContent>*@
            <HeaderContent>
                <MudTh>Описание</MudTh>
                <MudTh>Выполнение</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Описание">@context.TaskInfo</MudTd>
                <MudTd DataLabel="Выполнение"><MudCheckBox @bind-Checked="@context.isDone" Class="d-flex mx-auto" Color="Color.Info" @onclick="() => RadioButtonChanged(context)"></MudCheckBox></MudTd>
            </RowTemplate>
        </MudTable>
    </div>
    <div style="width: 49%; height: 49%; box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;">
        <img src='/css//Mesh-20.png' style="width: 100%; height:100%; object-fit: cover; overflow: hidden">
    </div>
</div>

@code {
    private IEnumerable<Analyze> ListOfAnalyzes = new List<Analyze>();
    private int analyzes;
    private IEnumerable<Analyze> ListOfMyAnalyzes = new List<Analyze>();
    private int myAnalyzes;
    private IEnumerable<Analyze> ListOfRequests = new List<Analyze>();
    private int requests;

    private Data.Task selectedItem1 = null;
    public List<int> dataList = new List<int>();
    public List<string> labelsList = new List<string>();
    public string[] labels = new string[] { };
    public double[] data = new double[] { };
    private HashSet<Data.Task> selectedItems = new HashSet<Data.Task>();

    private IEnumerable<Data.Task> Elements = new List<Data.Task>();

    protected override void OnInitialized()
    {
        ListOfAnalyzes = DBConnection.ImportOnlyAnalyzes();
        analyzes = ListOfAnalyzes.Count();
        ListOfAnalyzes = DBConnection.ImportOnlyAnalyzesOfWorker(currentUser.CurrentUserData);
        analyzes = ListOfAnalyzes.Count();
        ListOfRequests = DBConnection.ImportOnlyApplications();
        requests = ListOfRequests.Count();
        Elements = DBConnection.ImportTasksOfWorker(currentUser.CurrentUserData);

        UpdateChart();
    }

    public async void RadioButtonChanged(Data.Task task)
    {
        task.isDone = !task.isDone;
        DBConnection.ReplaceTask(task);
        StateHasChanged();
        Elements = null;
        Elements = DBConnection.ImportTasksOfWorker(currentUser.CurrentUserData);
    }

    private void UpdateChart()
    {
        dataList.Clear();
        labelsList.Clear();

        labelsList.Add("Заявки");

        dataList.Add(requests);

        labelsList.Add("Анализы");

        dataList.Add(analyzes);

        //foreach (var cl in ListOfUsers)
        //{
        //    List<User> lessons = ;

        //    if (lessons != null && date != null)
        //    {
        //        foreach (var todayLesson in lessons)
        //        {
        //            var lessonDate = Convert.ToDateTime(todayLesson.TimeStart).Day;

        //            if (Convert.ToDateTime(date).Day == lessonDate)
        //            {
        //                int attend = EducationClubContext.Attendences.Where(x => x.LessonId == todayLesson.Id).Count();

        //                labelsList.Add(todayLesson.Title);
        //                dataList.Add(attend);
        //            }
        //        }
        //    }
        //}

        data = dataList.ToArray().Select(Convert.ToDouble).ToArray();
        labels = labelsList.ToArray();
    }
}

<style>
    .imageOne {
        box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;
        position: absolute;
        left: 35%;
        transform: translate(-65%,45%);
        opacity: 1;
        width: 30%;
        height: 1500%;
        mix-blend-mode: normal;
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
    }

    .mainblock {
        display: flex;
        box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px;
        position: absolute;
        left: 15%;
        gap: 2%;
        top: 700%;
        width: 70%;
        height: 3100%;
        opacity: 1;
        mix-blend-mode: normal;
        background-color: rgba(255, 255, 255, 1);
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
    }

    .imageTwo {
        box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px;
        position: absolute;
        left: 39%;
        transform: translate(-61%, 10%);
        opacity: 1;
        width: 28%;
        height: 1500%;
        mix-blend-mode: normal;
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
    }

    .boxSix {
        box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;
        position: absolute;
        left: 35%;
        transform: translate(-65%, 65%);
        opacity: 1;
        width: 30%;
        height: 1500%;
        mix-blend-mode: normal;
        align-items: inherit;
        gap: 10px;
        align-items: flex-start;
        justify-content: flex-start
    }

    .boxFive {
        box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px;
        position: absolute;
        left: 70%;
        transform: translate(-30%, 125%);
        opacity: 1;
        width: 30%;
        height: 800%;
        mix-blend-mode: normal;
        align-items: inherit;
        gap: 10px;
        align-items: flex-start;
        justify-content: flex-start
    }
</style>