@page "/requestadd"
@page "/analyze"
@page "/requestAdd/{requestId}"
@using OilQuality.Data;
@inject ISnackbar Snackbar
@inject NavigationManager navigation;
@inject Deposit depositData;
@inject DefinedIndicator definedIndicatorData;
@inject MethodData methodData;

<MudAppBar Style="margin-top: 2%; position: absolute; width: 90%; left: 50%; transform: translate(-50%, 0); background-color: white; box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px;">
    <div Class="d-flex mx-auto">
        <MudButton Href="/manager">
            Главная страница
        </MudButton>
        <MudButton Href="/requestListManager">
            Заявки
        </MudButton>
        <MudButton Href="/allAnalyzeList">
            Выполненные анализы
        </MudButton>
        <MudButton Href="/managerEquipList">
            Оборудование
        </MudButton>
    </div>
    <MudIconButton Icon="@Icons.Material.Outlined.ExitToApp" aria-label="exit" Href="/"></MudIconButton>
</MudAppBar>

<div class="mainblock">
    <div style="width: 50%; ">
        <img src='/css//Mesh-20.png' style="width: 100%; height:100%; object-fit: cover; overflow: hidden; box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px;">
    </div>
    <div style="width: 50%; margin: 25px; padding: 25px; ">
        <MudText Style="font-size: 16px">
            Номер:
        </MudText>
        <MudTextField T="String" Variant="Variant.Text" Style="font-size: 16px; margin: 0; margin-bottom: 10px" @bind-Value="@title" Disabled="!newOne" />
        <MudText Style="font-size: 16px">
            Объект исследования:
        </MudText>
        <MudSelect T="String" ValueChanged="TypeChange" Value="@type" Style="font-size: 16px; margin: 0; margin-bottom: 10px">
            <MudSelectItem Value="@("Вода")" />
            <MudSelectItem Value="@("Нефть")" />
        </MudSelect>
        <MudText Style="font-size: 16px">
            Месторождение:
        </MudText>
        <MudSelect T="String" @bind-Value="@depositActual" Style="font-size: 16px; margin: 0; margin-bottom: 10px">
            @foreach (var dep in deposits)
            {
                <MudSelectItem Value="@dep" />
            }
        </MudSelect>
        <MudText Style="font-size: 16px">
            Определяемый показатель:
        </MudText>
        <MudSelect Value="@indicator" T="String" ValueChanged="IndicatorChange" Style="font-size: 16px; margin: 0; margin-bottom: 10px">
            @foreach (var indic in indicators)
            {
                <MudSelectItem Value="@indic" />
            }
        </MudSelect>
        <MudText Style="font-size: 16px; margin: 0">
            Метод: @method
        </MudText>
        <br />
        @if (!newOne)
        {
            <div Class="d-flex mx-auto" style="display: inline-block;">
                <MudButton Variant="Variant.Outlined" Color="Color.Info" Class="d-flex mx-auto" Style="margin: 15px" @onclick="RegistrationNewAnalyze">
                    Сохранить
                </MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Info" Class="d-flex mx-auto" Style="margin: 15px" @onclick="DeletingAnalyze">
                    Удалить
                </MudButton>
            </div>
        }
        else
        {
            <MudButton Variant="Variant.Outlined" Color="Color.Info" Class="d-flex mx-auto" Style="margin: 15px" @onclick="RegistrationNewAnalyze">
                Сохранить
            </MudButton>
        }
    </div>

</div>

@code {
    string? title;
    string? type;
    string? indicator;
    string? method;
    string? depositActual;
    bool newOne;

    List<string> deposits;
    List<string> indicators;

    Analyze analyze;

    [Parameter]
    public string? requestId { get; set; }

    protected override void OnInitialized()
    {
        newOne = true;

        deposits = new List<string>()
        {
            ""
        };

        indicators = new List<string>()
        {
            ""
        };

        if (requestId != null)
        {
            analyze = DBConnection.FindAnalyzeByTitle(requestId);

            //if (analyze.ResultData == null)
            //{
            //    disabled = false;
            //}
            //else
            //{
            //    disabled = true;

            //    result = analyze.ResultData;
            //}

            title = analyze.Title;
            type = analyze.Type;
            indicator = analyze.DefinedIndicatorData;
            method = analyze.MethodData;
            depositActual = analyze.Deposit;

            TypeChange(type);
            IndicatorChange(indicator);

            type = analyze.Type;
            indicator = analyze.DefinedIndicatorData;
            method = analyze.MethodData;
            depositActual = analyze.Deposit;

            newOne = false;
        }
    }

    public void DeletingAnalyze()
    {
        Analyze analyz = DBConnection.FindAnalyzeByTitle(analyze.Title);
        DBConnection.DeleteAnalyzeFromDataBase(analyz);
        //Snackbar.Add("Успешно удалено", Severity.Success);
        //analyzes = DBConnection.ImportOnlyApplications();

        Snackbar.Add("Успешно", Severity.Success);
        navigation.NavigateTo("/requestListManager");
    }

    public void IndicatorChange(string selected)
    {
        indicator = selected;

        if (indicator != null)
        {
            switch (type)
            {
                case "Вода":
                    method = methodData.methodsWater[indicator];
                    break;
                case "Нефть":
                    method = methodData.methodsOil[indicator];
                    break;

            }
        }
    }

    public void TypeChange(string selected)
    {
        type = selected;
        depositActual = null;
        indicator = null;
        method = null;

        switch (type)
        {
            case "Вода":
                deposits = depositData.depositOfWater;

                indicators = definedIndicatorData.indicatorOfWater;

                break;
            case "Нефть":
                deposits = depositData.depositOfOil;

                indicators = definedIndicatorData.indicatorOfOil;

                break;

        }
    }

    public void RegistrationNewAnalyze()
    {
        if (title != null && type != null && indicator != null &&
            method != null && depositActual != null)
        {
            if (newOne)
            {
                if (DBConnection.FindAnalyzeByTitle(title) == null)
                {
                    Analyze analyzeData = new Analyze()
                        {
                            Title = title,
                            Type = type,
                            DefinedIndicatorData = indicator,
                            Deposit = depositActual,
                            MethodData = method
                        };
                    DBConnection.AddAnalyzeToDataBase(analyzeData);

                    Snackbar.Add("Успешно", Severity.Success);
                    navigation.NavigateTo("/requestListManager");

                }
                else
                {
                    Snackbar.Add("Анализ с таким номером уже существует.", Severity.Error);
                }
            }
            else
            {
                analyze.Title = title;
                analyze.Type = type;
                analyze.DefinedIndicatorData = indicator;
                analyze.MethodData = method;
                analyze.Deposit = depositActual;

                DBConnection.ReplaceAnalyze(analyze);
                Snackbar.Add("Успешно", Severity.Success);
                navigation.NavigateTo("/requestListManager");
            }
        }
        else
        {
            Snackbar.Add("Не все необходимые поля заполнены.", Severity.Error);
        }
    }
}

<style>

    .buttonThree {
        box-shadow: rgba(0, 0, 0, 0.25) 0 8px 15px;
        transform: translateY(-2px);
        margin: 3%;
        position: absolute;
        bottom: 0;
        right: 0;
        width: 10%;
        background-color: white;
        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.5);
        opacity: 1;
        mix-blend-mode: normal;
        padding-left: 10px;
        padding-right: 10px;
        padding-top: 10px;
        align-items: inherit;
        align-items: flex-start;
        justify-content: flex-start;
        border-radius: 20px
    }

    .pStyle {
        letter-spacing: 0;
        text-transform: none;
        text-align: center;
        vertical-align: middle;
        font-family: Playfair Display;
        font-size: 20px;
        color: rgba(0, 0, 0, 1);
        font-weight: 400;
        width: 100%
    }

    .mainblock {
        display: flex;
        box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px;
        position: absolute;
        left: 15%;
        top: 700%;
        width: 70%;
        height: 3100%;
        flex-direction: row;
        justify-content: center;
        background-color: white;
        align-self: center;
        /*        background-image: url('/css//Mesh-51.png');*/
    }
</style>